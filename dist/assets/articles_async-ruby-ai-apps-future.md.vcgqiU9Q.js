import{_ as a,c as i,o as n,ah as l}from"./chunks/framework.CDWSO0OB.js";const o=JSON.parse('{"title":"异步Ruby是AI应用的未来（它已经到来）","description":"","frontmatter":{},"headers":[],"relativePath":"articles/async-ruby-ai-apps-future.md","filePath":"articles/async-ruby-ai-apps-future.md","lastUpdated":null}'),e={name:"articles/async-ruby-ai-apps-future.md"};function p(h,s,t,r,k,d){return n(),i("div",null,s[0]||(s[0]=[l(`<h1 id="异步ruby是ai应用的未来-它已经到来" tabindex="-1">异步Ruby是AI应用的未来（它已经到来） <a class="header-anchor" href="#异步ruby是ai应用的未来-它已经到来" aria-label="Permalink to &quot;异步Ruby是AI应用的未来（它已经到来）&quot;">​</a></h1><p>作为一名在Python异步生态系统中浸润了十年的机器学习工程师/科学家，重返Ruby就像是倒退了一个时代。异步革命在哪里？为什么大家仍然在使用线程处理一切？SolidQueue、Sidekiq、GoodJob——都是基于线程的。即使是较新的解决方案也默认使用相同的并发模型。</p><p>来自Python的我，见证了整个社区围绕<code>asyncio</code>重新组织，这看起来很奇怪。FastAPI取代了Flask。每个库都催生了异步孪生体。这种转变是彻底且必要的。</p><p>然后，在构建<a href="https://rubyllm.com/" target="_blank" rel="noreferrer">RubyLLM</a>和<a href="https://chatwithwork.com/" target="_blank" rel="noreferrer">Chat with Work</a>的过程中，我注意到<em>LLM通信是异步Ruby的杀手级应用</em>。流式AI响应的独特需求——长连接、逐token传输、数千个并发对话——恰好暴露了异步为什么重要。</p><p>这里有个令人兴奋的发现：一旦我理解了Ruby的异步方法，我意识到它实际上<em>优于</em>Python的方法。当Python强制所有人重写整个技术栈时，Ruby悄悄地构建了更好的东西。你现有的代码就能正常工作。没有语法改变。没有库迁移。只是在需要时获得更好的性能。</p><p><a href="https://github.com/ioquatix" target="_blank" rel="noreferrer">Samuel Williams</a>和其他人多年来一直在构建的异步生态系统突然变得完全合理。我们只是需要正确的用例来看到它。</p><h2 id="为什么llm通信会破坏一切" tabindex="-1">为什么LLM通信会破坏一切 <a class="header-anchor" href="#为什么llm通信会破坏一切" aria-label="Permalink to &quot;为什么LLM通信会破坏一切&quot;">​</a></h2><p>LLM应用创造了一个完美风暴的挑战，暴露了基于线程的并发的每一个弱点：</p><h3 id="_1-槽位饥饿" tabindex="-1">1. 槽位饥饿 <a class="header-anchor" href="#_1-槽位饥饿" aria-label="Permalink to &quot;1. 槽位饥饿&quot;">​</a></h3><p>为任何基于线程的作业队列配置25个工作者：</p><div class="language-ruby vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> StreamAIResponseJob</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ApplicationJob</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> perform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chat, message)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 这个作业占用你25个槽位中的1个...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    chat.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |chunk|</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # ...在整个流式传输期间（30-60秒）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      broadcast_chunk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chunk)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 线程99%的时间都在空闲，只是等待token</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 只有在完整响应后才释放槽位</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>你的第26个用户？他们在排队等候。不是因为服务器忙碌，而是因为所有工作者都被等待token的作业占用了。</p><h3 id="_2-资源倍增" tabindex="-1">2. 资源倍增 <a class="header-anchor" href="#_2-资源倍增" aria-label="Permalink to &quot;2. 资源倍增&quot;">​</a></h3><p>每个线程都需要自己的：</p><ul><li>数据库连接（25个线程 = 至少25个连接）</li><li>栈内存分配</li><li>操作系统线程管理开销</li></ul><p>对于1000个并发对话，你需要1000个线程。每个线程都需要自己的数据库连接。那就是1000个数据库连接，用于99%时间都在空闲的线程。</p><h3 id="_3-性能开销" tabindex="-1">3. 性能开销 <a class="header-anchor" href="#_3-性能开销" aria-label="Permalink to &quot;3. 性能开销&quot;">​</a></h3><p>真实基准测试显示：</p><ul><li>创建一个线程：约80μs</li><li>线程上下文切换：约1.3μs</li><li>最大吞吐量：约5,000请求/秒</li></ul><p>当你在处理数千个流式连接时，这些微秒累积成真正的延迟。</p><h3 id="_4-可扩展性挑战" tabindex="-1">4. 可扩展性挑战 <a class="header-anchor" href="#_4-可扩展性挑战" aria-label="Permalink to &quot;4. 可扩展性挑战&quot;">​</a></h3><p>尝试创建10,000个线程，操作系统调度器开始遇到困难。开销变得压倒性。然而现代AI应用需要处理数千个并发对话。</p><p>这些不是独立的问题——它们都是相同架构不匹配的症状。LLM通信与传统后台作业根本不同。</p><h2 id="理解并发-线程vs异步" tabindex="-1">理解并发：线程vs异步 <a class="header-anchor" href="#理解并发-线程vs异步" aria-label="Permalink to &quot;理解并发：线程vs异步&quot;">​</a></h2><p>要理解为什么LLM应用是异步的完美用例——以及为什么Ruby的实现如此优雅——我们需要从第一原理开始构建。</p><h3 id="层次结构-进程、线程和纤程" tabindex="-1">层次结构：进程、线程和纤程 <a class="header-anchor" href="#层次结构-进程、线程和纤程" aria-label="Permalink to &quot;层次结构：进程、线程和纤程&quot;">​</a></h3><p>把你的计算机想象成一栋办公楼：</p><ul><li><strong>进程</strong>就像独立的办公室——每个都有自己锁着的门、家具和文件。它们看不到彼此的空间（内存隔离）。</li><li><strong>线程</strong>就像共享同一个办公室的工作者——他们可以访问相同的文件柜（共享内存），但需要协调以避免冲突。</li><li><strong>纤程</strong>就像一个工作者在桌子上处理多个任务——在等待某些东西（如电话）时手动在它们之间切换。</li></ul><h3 id="调度-核心区别" tabindex="-1">调度：核心区别 <a class="header-anchor" href="#调度-核心区别" aria-label="Permalink to &quot;调度：核心区别&quot;">​</a></h3><p>并发的基本问题是：谁决定何时在任务之间切换？</p><h4 id="线程-抢占式多任务" tabindex="-1">线程：抢占式多任务 <a class="header-anchor" href="#线程-抢占式多任务" aria-label="Permalink to &quot;线程：抢占式多任务&quot;">​</a></h4><p>对于线程，操作系统是老板。它强制中断正在运行的线程，让其他线程轮流执行：</p><div class="language-ruby vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 你启动线程，但操作系统控制它们</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">threads</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">times</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |i|</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 这可能在任何时刻被中断</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    expensive_calculation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    fetch_from_api</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 每个线程在这里单独阻塞</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    process_result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>每个线程：</p><ul><li>由操作系统内核调度</li><li>可以在执行中被中断（在Ruby中，100ms后）</li><li>在I/O操作上单独阻塞</li><li>需要操作系统资源和内核数据结构</li><li>需要自己的资源（如数据库连接）</li></ul><h4 id="纤程-协作式并发" tabindex="-1">纤程：协作式并发 <a class="header-anchor" href="#纤程-协作式并发" aria-label="Permalink to &quot;纤程：协作式并发&quot;">​</a></h4><p>对于纤程，切换是自愿的——它们只在I/O边界让出：</p><div class="language-ruby vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 纤程协作地让出控制权</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  fibers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">times</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |i|</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      expensive_calculation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 运行到完成</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      fetch_from_api</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在这里让出，其他纤程运行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      process_result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># I/O完成后继续</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>每个纤程：</p><ul><li>通过在I/O期间让出来调度自己</li><li>永远不会在计算中被中断</li><li>完全在用户空间管理（无内核参与）</li><li>通过事件循环共享资源</li></ul><h3 id="ruby的gvl-为什么纤程更有意义" tabindex="-1">Ruby的GVL：为什么纤程更有意义 <a class="header-anchor" href="#ruby的gvl-为什么纤程更有意义" aria-label="Permalink to &quot;Ruby的GVL：为什么纤程更有意义&quot;">​</a></h3><p>Ruby的全局VM锁（GVL）意味着一次只有一个线程可以执行Ruby代码。线程在100ms时间片后被抢占。</p><p>这创造了一个有趣的动态：</p><div class="language-ruby vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># CPU工作：由于GVL，线程帮助不大</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">threads</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">times</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">calculate_fibonacci</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 耗时大约与顺序执行相同！</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># I/O工作：线程确实并行化（I/O期间释放GVL）</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">threads</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">times</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Net</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uri) }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 耗时为顺序执行的1/4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>但问题是：如果线程只对I/O有帮助，<em>为什么要承担它们的开销</em>？</p><h3 id="i-o多路复用优势" tabindex="-1">I/O多路复用优势 <a class="header-anchor" href="#i-o多路复用优势" aria-label="Permalink to &quot;I/O多路复用优势&quot;">​</a></h3><p>这是纤程真正闪耀的地方。线程使用&quot;一个线程，一个I/O操作&quot;模型：</p><div class="language-ruby vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 传统线程方法</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">thread1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { socket1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 阻塞这个线程</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">thread2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { socket2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 阻塞这个线程</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">thread3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { socket3.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 阻塞这个线程</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 需要3个线程处理3个并发I/O操作</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>纤程使用I/O多路复用——一个线程监控<em>所有</em>I/O：</p><div class="language-ruby vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Async的方法（简化）</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 一个线程，多个I/O操作</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  task1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { socket1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 向选择器注册</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  task2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { socket2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 向选择器注册</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  task3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { socket3.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 向选择器注册</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 事件循环使用epoll/kqueue监控所有套接字</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 当数据可用时恢复纤程</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>内核（通过<code>epoll</code>、<code>kqueue</code>或<code>io_uring</code>）可以通过单次系统调用监控数千个文件描述符。不需要每连接一个线程。</p><h3 id="为什么纤程获胜-完整图景" tabindex="-1">为什么纤程获胜：完整图景 <a class="header-anchor" href="#为什么纤程获胜-完整图景" aria-label="Permalink to &quot;为什么纤程获胜：完整图景&quot;">​</a></h3><p>让我们看看比较纤程和线程的真实基准数据：</p><p><strong>性能优势（Ruby 3.4数据）</strong>：</p><ul><li><strong>20倍快的分配</strong>：创建纤程需要约3μs vs 线程的约80μs</li><li><strong>10倍快的上下文切换</strong>：纤程切换约0.1μs vs 线程的约1.3μs</li><li><strong>15倍高的吞吐量</strong>：约80,000 vs 约5,000请求/秒</li></ul><p>但真正的优势是<strong>可扩展性</strong>：</p><ol><li><strong>更少的操作系统资源</strong>：纤程在用户空间管理，避免内核开销</li><li><strong>高效调度</strong>：无内核参与意味着更少开销</li><li><strong>I/O多路复用</strong>：一个线程通过<code>epoll</code>/<code>kqueue</code>/<code>io_uring</code>监控数千个I/O操作</li><li><strong>GVL友好</strong>：协作调度与Ruby的并发模型自然配合</li><li><strong>资源共享</strong>：数据库连接和内存池自然共享</li></ol><p>虽然纤程和线程之间的内存使用相当，但纤程不依赖操作系统资源。你可以创建比线程多得多的纤程，在它们之间更快地切换，并更高效地管理它们，同时监控数千个连接——全部来自用户空间。</p><h2 id="异步如何解决每个llm挑战" tabindex="-1">异步如何解决每个LLM挑战 <a class="header-anchor" href="#异步如何解决每个llm挑战" aria-label="Permalink to &quot;异步如何解决每个LLM挑战&quot;">​</a></h2><p>记住那四个问题吗？这里是异步如何解决每一个：</p><ol><li><strong>不再有槽位饥饿</strong>：纤程按需创建并立即销毁。没有固定的工作者池。</li><li><strong>共享资源</strong>：一个进程配合少量池化数据库连接可以处理数千个对话。</li><li><strong>改进的性能</strong>：创建快20倍，切换快10倍，调度开销少15倍（综合上限）。</li><li><strong>大幅改进的可扩展性</strong>：10,000+并发纤程？没问题。操作系统甚至不知道它们的存在。</li></ol><h2 id="ruby的异步生态系统" tabindex="-1">Ruby的异步生态系统 <a class="header-anchor" href="#ruby的异步生态系统" aria-label="Permalink to &quot;Ruby的异步生态系统&quot;">​</a></h2><p>Ruby的<a href="https://github.com/socketry/async" target="_blank" rel="noreferrer">async</a>之美在于其透明性。与Python要求到处使用<code>async</code>/<code>await</code>不同，Ruby代码就是能工作：</p><h3 id="基础-async-gem" tabindex="-1">基础：<a href="https://github.com/socketry/async" target="_blank" rel="noreferrer">async</a> gem <a class="header-anchor" href="#基础-async-gem" aria-label="Permalink to &quot;基础：[async](https://github.com/socketry/async) gem&quot;">​</a></h3><div class="language-ruby vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">require</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;async&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">require</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;net/http&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这段代码处理1000个并发请求</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用一个线程和最少的内存</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  responses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">times</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |i|</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">      uri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">URI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.openai.com/v1/chat/completions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # Net::HTTP在I/O期间自动让出</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">      response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Net</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uri, data.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to_json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, headers)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:wait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 所有1000个请求并发完成</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  process_responses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(responses)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>没有回调。没有promise。没有async/await关键字。只是能扩展的Ruby代码。</p><h3 id="为什么rubyllm就是能工作tm" tabindex="-1">为什么RubyLLM就是能工作™ <a class="header-anchor" href="#为什么rubyllm就是能工作tm" aria-label="Permalink to &quot;为什么RubyLLM就是能工作™&quot;">​</a></h3><p>这里有个让我在发现时微笑的事情：<a href="https://rubyllm.com/" target="_blank" rel="noreferrer">RubyLLM</a><em>免费</em>获得异步性能。不需要特殊的RubyLLM-async版本。不需要更改库代码。不需要配置。什么都不需要。</p><p>为什么？因为RubyLLM在内部使用<code>Net::HTTP</code>。当你把RubyLLM调用包装在Async块中时，<code>Net::HTTP</code>在网络I/O期间自动让出，允许数千个并发LLM对话在单个线程上发生。</p><div class="language-ruby vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这就是并发LLM调用所需的全部</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">times</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # RubyLLM自动变成非阻塞的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 因为Net::HTTP知道如何向纤程让出</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">      message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RubyLLM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ask</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;解释量子计算&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      puts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">content</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:wait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>这是Ruby的最佳表现。遵循约定的库无需尝试就获得了超能力。它就是能工作，因为它建立在坚实的基础上。</p><h3 id="生态系统的其余部分" tabindex="-1">生态系统的其余部分 <a class="header-anchor" href="#生态系统的其余部分" aria-label="Permalink to &quot;生态系统的其余部分&quot;">​</a></h3><ul><li><strong><a href="https://github.com/socketry/falcon" target="_blank" rel="noreferrer">Falcon</a></strong>：为流式构建的多进程、多纤程Web服务器</li><li><strong><a href="https://github.com/socketry/async-job" target="_blank" rel="noreferrer">async-job</a></strong>：使用纤程的后台作业处理</li><li><strong><a href="https://github.com/socketry/async-cable" target="_blank" rel="noreferrer">async-cable</a></strong>：基于纤程并发的ActionCable替代品</li><li><strong><a href="https://github.com/socketry/async-http" target="_blank" rel="noreferrer">async-http</a></strong>：支持流式的全功能HTTP客户端</li></ul><p>……以及<a href="https://github.com/orgs/socketry/repositories" target="_blank" rel="noreferrer">Socketry</a>提供的更多功能。</p><h2 id="将rails应用迁移到异步" tabindex="-1">将Rails应用迁移到异步 <a class="header-anchor" href="#将rails应用迁移到异步" aria-label="Permalink to &quot;将Rails应用迁移到异步&quot;">​</a></h2><p>迁移几乎不需要代码更改：</p><h3 id="步骤1-更新你的gemfile" tabindex="-1">步骤1：更新你的Gemfile <a class="header-anchor" href="#步骤1-更新你的gemfile" aria-label="Permalink to &quot;步骤1：更新你的Gemfile&quot;">​</a></h3><div class="language-ruby vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Gemfile</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 注释掉基于线程的gem</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># gem &quot;puma&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># gem &quot;sidekiq&quot; / &quot;good_job&quot; / &quot;solid_queue&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># gem &quot;solid_cable&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加异步gem</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gem </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;falcon&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gem </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;async-job-adapter-active_job&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gem </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;async-cable&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="步骤2-一行配置" tabindex="-1">步骤2：一行配置 <a class="header-anchor" href="#步骤2-一行配置" aria-label="Permalink to &quot;步骤2：一行配置&quot;">​</a></h3><div class="language-ruby vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># config/application.rb</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">require</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;async/cable&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># config/environments/production.rb</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">active_job</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">queue_adapter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :async_job</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="步骤3-没有步骤3" tabindex="-1">步骤3：没有步骤3！ <a class="header-anchor" href="#步骤3-没有步骤3" aria-label="Permalink to &quot;步骤3：没有步骤3！&quot;">​</a></h3><p>你现有的作业保持不变。你的频道不需要更新。</p><p>只需部署并观察。你将获得更多性能、更多容量和更好的响应时间。</p><h2 id="何时使用什么" tabindex="-1">何时使用什么 <a class="header-anchor" href="#何时使用什么" aria-label="Permalink to &quot;何时使用什么&quot;">​</a></h2><p>让我们实际一点——异步并非总是答案：</p><p><strong>使用线程用于：</strong></p><ul><li>CPU密集型工作</li><li>需要真正隔离的任务</li><li>不兼容纤程的传统C扩展</li></ul><p><strong>使用异步用于：</strong></p><ul><li>I/O绑定操作</li><li>API调用</li><li>WebSocket、SSE和其他形式的流式传输</li><li>LLM应用</li></ul><h2 id="ruby的新篇章" tabindex="-1">Ruby的新篇章 <a class="header-anchor" href="#ruby的新篇章" aria-label="Permalink to &quot;Ruby的新篇章&quot;">​</a></h2><p>在Python异步世界多年后，我见证了当语言强制语法更改以访问异步并发的好处时社区会发生什么。库分裂。代码库分割。开发者与新语法和概念斗争。</p><p>Ruby选择了不同的路径——这是正确的。</p><p>我们正在见证Ruby的下一个进化。不是通过破坏性更改或生态系统分裂，而是通过深思熟虑的添加来让我们现有的代码更好。当与传统线程相比时似乎不必要的异步生态系统，当你遇到正确用例时突然变得至关重要。</p><p>LLM应用就是那个用例。长连接、流式响应和大规模并发的结合创造了完美风暴，让异步的好处变得不可否认。</p><p><a href="https://github.com/ioquatix" target="_blank" rel="noreferrer">Samuel Williams</a>和<a href="https://github.com/socketry/async" target="_blank" rel="noreferrer">async</a>社区给了我们令人难以置信的工具。与Python不同，你不必重写一切来使用它。</p><p>对于那些构建下一代AI驱动应用的人来说，<a href="https://github.com/socketry/async" target="_blank" rel="noreferrer">async</a> Ruby不仅仅是一个选择——它是一个竞争优势。更低的成本、更好的性能、更简单的操作，而且你保留了现有的代码库。</p><p>未来是并发的。未来是流式的。未来是<a href="https://github.com/socketry/async" target="_blank" rel="noreferrer">async</a>的。</p><p>在Ruby中，那个未来与你已有的代码一起工作。</p><hr><p><em><a href="https://rubyllm.com/" target="_blank" rel="noreferrer">RubyLLM</a>在生产中使用<a href="https://github.com/socketry/async" target="_blank" rel="noreferrer">async</a>为<a href="https://chatwithwork.com/" target="_blank" rel="noreferrer">Chat with Work</a>提供数千个并发AI对话。想要在Ruby中优雅的AI集成？查看<a href="https://rubyllm.com/" target="_blank" rel="noreferrer">RubyLLM</a>。</em></p><p><em>特别感谢<a href="https://github.com/ioquatix" target="_blank" rel="noreferrer">Samuel Williams</a>审阅这篇文章并提供证实这些性能声明的<a href="https://github.com/socketry/performance/tree/adfd780c6b4842b9534edfa15e383e5dfd4b4137/fiber-vs-thread" target="_blank" rel="noreferrer">纤程vs线程基准测试</a>。</em></p><p>**加入对话：**我将在<a href="https://2025.euruko.org/" target="_blank" rel="noreferrer">EuRuKo 2025</a>、<a href="https://sfruby.com/" target="_blank" rel="noreferrer">San Francisco Ruby Conference 2025</a>和<a href="https://rubyconfth.com/" target="_blank" rel="noreferrer">RubyConf Thailand 2026</a>谈论异步Ruby和AI。让我们一起构建未来。</p>`,102)]))}const b=a(e,[["render",p]]);export{o as __pageData,b as default};
